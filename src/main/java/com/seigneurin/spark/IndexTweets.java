package com.seigneurin.spark;

import org.apache.spark.Logging;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

/*
import org.apache.spark.SparkConf;
import org.apache.spark.serializer.KryoSerializer;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.twitter.TwitterUtils;
import org.elasticsearch.spark.rdd.api.java.JavaEsSpark;
*/

import twitter4j.*;
/*
import twitter4j.auth.Authorization;
import twitter4j.auth.AuthorizationFactory;
import twitter4j.conf.Configuration;
import twitter4j.conf.ConfigurationContext;
*/

/*
import com.cybozu.labs.langdetect.Detector;
import com.cybozu.labs.langdetect.DetectorFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.seigneurin.spark.pojo.Tweet;
*/

/*
import jodd.util.ClassLoaderUtil;
import java.util.List;
import java.util.Vector;
import jodd.io.FileUtil;
import jodd.io.findfile.ClassScanner;
import java.net.URL;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
//import org.apache.commons.io.IOUtils;
import jodd.util.StringPool;
import jodd.util.StringUtil;
import jodd.core.JoddCore;
*/

import com.google.common.collect.Lists;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.storage.StorageLevel;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.receiver.Receiver;
import scala.Tuple2;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.ConnectException;
import java.net.Socket;
import java.util.regex.Pattern;

public class IndexTweets extends Receiver<String> {
  private static final Pattern SPACE = Pattern.compile(" ");
  private static org.apache.log4j.Logger log = Logger.getLogger(IndexTweets.class);

  public static void main(String[] args) {
    //if (args.length < 2) {
    //  System.err.println("Usage: IndexTweets <hostname> <port>");
    //  System.exit(1);
    //}
    log.info("This is us!");

    //StreamingExamples.setStreamingLogLevels();
    //if(!Logger.getRootLogger.getAllAppenders.hasMoreElements) {
    //  Logger.getRootLogger.setLevel(Level.DEBUG);
    //}

    // Create the context with a 1 second batch size
    SparkConf sparkConf = new SparkConf().setAppName("IndexTweets");
    JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(1000));

    // Create a input stream with the custom receiver on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    JavaReceiverInputDStream<String> lines = ssc.receiverStream(new IndexTweets());
    JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {
      @Override
      public Iterable<String> call(String x) {
        log.info("FU.");
        return Lists.newArrayList(SPACE.split(x));
      }
    });
    JavaPairDStream<String, Integer> wordCounts = words.mapToPair(
      new PairFunction<String, String, Integer>() {
        @Override public Tuple2<String, Integer> call(String s) {
          return new Tuple2<String, Integer>(s, 1);
        }
      }).reduceByKey(new Function2<Integer, Integer, Integer>() {
        @Override
        public Integer call(Integer i1, Integer i2) {
          return i1 + i2;
        }
      });

    wordCounts.print();
    ssc.start();
    ssc.awaitTermination();
  }

  // ============= Receiver code that receives data over a socket ==============
  private static TwitterStream twitterStream = new TwitterStreamFactory().getInstance();
  public IndexTweets() {
    super(StorageLevel.MEMORY_AND_DISK_2());
    log.info("Twitter4J");
    StatusListener listener = new StatusListener() {
        @Override public void onStatus(Status status) {
            log.info("[store] " + status.getUser().getName() + " : " + status.getText());
            store(status.getUser().getName() + " : " + status.getText());
        }
        @Override public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {}
        @Override public void onStallWarning(StallWarning warning) {}
        @Override public void onScrubGeo(long i,long f) {}
        @Override public void onTrackLimitationNotice(int numberOfLimitedStatuses) {}
        @Override public void onException(Exception ex) {
            ex.printStackTrace();
        }
    };
    twitterStream.addListener(listener);
  }

  public void onStart() {
     // sample() method internally creates a thread which manipulates TwitterStream and calls these adequate listener methods continuously.
     twitterStream.sample();
  }

  public void onStop() {
    // There is nothing much to do as the thread calling receive()
    // is designed to stop by itself isStopped() returns false
  }

  /** Create a socket connection and receive data until receiver is stopped */
  //private void receive() {
  //  Socket socket = null;
  //  String userInput = null;

  //  try {
  //    // connect to the server
  //    socket = new Socket(host, port);

  //    BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

  //    // Until stopped or connection broken continue reading
  //    while (!isStopped() && (userInput = reader.readLine()) != null) {
  //      System.out.println("Received data '" + userInput + "'");
  //      store(userInput);
  //    }
  //    reader.close();
  //    socket.close();

  //    // Restart in an attempt to connect again when server is active again
  //    restart("Trying to connect again");
  //  } catch(ConnectException ce) {
  //    // restart if could not connect to server
  //    restart("Could not connect", ce);
  //  } catch(Throwable t) {
  //    restart("Error receiving data", t);
  //  }
  //}
}
/*
public class IndexTweets {

    volatile static int counter = 0;

    public static void main(String[] args) throws Exception {
        System.err.println("Entered main...");
        // Twitter4J
        //StatusListener listener = new StatusListener() {
        //    @Override
	//    public void onStatus(Status status) {
        //        counter++;
        //        System.out.println(status.getUser().getName() + " : " + status.getText());
        //    }
        //    @Override
        //    public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {}
	//    @Override public void onStallWarning(StallWarning warning) {}
	//    @Override public void onScrubGeo(long i,long f) {}
        //    @Override
        //    public void onTrackLimitationNotice(int numberOfLimitedStatuses) {}
        //    @Override
        //    public void onException(Exception ex) {
        //        ex.printStackTrace();
        //    }
        //};
        //TwitterStream twitterStream = new TwitterStreamFactory().getInstance();
        //twitterStream.addListener(listener);
        //// sample() method internally creates a thread which manipulates TwitterStream and calls these adequate listener methods continuously.
        //twitterStream.sample();

        //while (counter < 10) {
        //        Thread.sleep(25);
        //}
        //twitterStream.shutdown(); //??

        // IMPORTANT: ajuster vos clÃ©s d'API dans twitter4J.properties
        Configuration twitterConf = ConfigurationContext.getInstance();
        Authorization twitterAuth = AuthorizationFactory.getInstance(twitterConf);

        // Jackson
        ObjectMapper mapper = new ObjectMapper();

        // Language Detection
        List<String> profiles = new Vector<String>();
        ClassScanner scanner = new ClassScanner() {
            @Override
            protected void onEntry(EntryData entryData) throws Exception {
                //String encoding = JoddCore.encoding;
                if (StringUtil.startsWithIgnoreCase(entryData.getName(), "/profiles/") 
                    && !StringUtil.endsWithIgnoreCase(entryData.getName(), "/profiles/")) {
                    //encoding = StringPool.ISO_8859_1;
                    System.err.println("Found profile: " + entryData.getName());
                    profiles.add(
                        FileUtil.readUTFString(
                            entryData.openInputStream()
                        )
                    );
                }
            }
        };
        scanner.setIncludeResources(true);
        scanner.setIgnoreException(true);
        //scanner.setExcludeAllEntries(true);
        //scanner.setIncludedEntries("/profiles/*");
        //scanner.scanDefaultClasspath();

        scanner.scan(
            FileUtil.toContainerFile(
              ClassLoaderUtil.getResourceUrl("/profiles/")
            )
        );
        System.err.println("Loading profiles...");
        DetectorFactory.loadProfile(profiles);

        // Spark
        SparkConf sparkConf = new SparkConf()
                .setAppName("Tweets #CyberMonday")
                .set("spark.serializer", KryoSerializer.class.getName())
                .set("es.nodes", "elasticsearch-aws-3.weave.local:9200");
        JavaStreamingContext sc = new JavaStreamingContext(sparkConf, new Duration(5000));

        String[] filters = { "#CyberMonday" };
        TwitterUtils.createStream(sc, twitterAuth, filters)
                //.map(s -> new Tweet(s.getUser().getName(), s.getText(), s.getCreatedAt(), detectLanguage(s.getText())))
                .map(t -> mapper.writeValueAsString(t))
                .foreachRDD(tweets -> {
                    // https://issues.apache.org/jira/browse/SPARK-4560
                    // tweets.foreach(t -> System.out.println(t));

                    // DO NOT CALL tweets.count()
                    // BANG. https://issues.apache.org/jira/browse/SPARK-4040
                    tweets.collect().stream().forEach(t -> System.out.println(t));
                    JavaEsSpark.saveJsonToEs(tweets, "spark/tweets");
                    return null;
                });

        sc.start();
        sc.awaitTermination();
    }

    private static String detectLanguage(String text) throws Exception {
        Detector detector = DetectorFactory.create();
        detector.append(text);
        return detector.detect();
    }
}
*/
